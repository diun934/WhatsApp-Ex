<Application x:Class="all_on_whatsapp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:hc="https://handyorg.github.io/handycontrol"
             xmlns:local="clr-namespace:all_on_whatsapp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/HandyControl;component/Themes/SkinDefault.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/HandyControl;component/Themes/Theme.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <!-- 关闭按钮样式 -->
            <Style x:Key="CloseButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="Gray"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="10,5"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}">
                                <Grid>
                                    <Line X1="0" Y1="0" X2="10" Y2="10" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" SnapsToDevicePixels="True"/>
                                    <Line X1="0" Y1="10" X2="10" Y2="0" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" SnapsToDevicePixels="True"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="Red"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="FrameworkElement" x:Key="SlideInAnimation">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Setter Property="Opacity" Value="0"/>
                <Style.Triggers>
                    <Trigger Property="Visibility" Value="Visible">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <!-- 高度从 50 动画到 500 -->

                                    <!-- 可选：透明度从 0 动画到 1 -->
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                         From="0" To="1" Duration="0:0:5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Storyboard x:Key="Custom1Transition" x:Shared="False">
                <DoubleAnimation From="50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                    <DoubleAnimation.EasingFunction>
                        <ElasticEase Oscillations="1"/>
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>

            <Storyboard x:Key="Custom2Transition" x:Shared="False">
                <DoubleAnimation From="10" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                    <DoubleAnimation.EasingFunction>
                        <ElasticEase Oscillations="1"/>
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>

            <Storyboard x:Key="Custom3Transition" x:Shared="False">
                <DoubleAnimation From=".8" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                    <DoubleAnimation.EasingFunction>
                        <ElasticEase Oscillations="1"/>
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>

            <Style TargetType="FrameworkElement" x:Key="VisibleAnimation">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Setter Property="Opacity" Value="0"/>
                <Setter Property="RenderTransformOrigin" Value="0.5,1"/>
                <!-- 设置中心点为控件的底部中心 -->
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleY="0"/>
                        <!-- 初始状态在Y轴上缩小为0 -->
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Visibility" Value="Visible">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation 
                            Storyboard.TargetProperty="Opacity"
                            From="0.0" To="1.0" Duration="0:0:0.3"/>
                                    <DoubleAnimation 
                            Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
                            From="0" To="1" Duration="0:0:0.1"/>
                                    <!-- Y轴缩放从0变到1，实现从下往上的展开效果 -->
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Define a global style for Button -->
            <Style TargetType="Button">
                <Setter Property="Width" Value="50"/>
                <Setter Property="Height" Value="50"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                CornerRadius="20">
                                <!-- This makes the border and background rounded -->
                                <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <!-- Change background when mouse is over -->
                                    <Setter Property="Background" Value="DarkGray"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- 置顶用户按钮 -->
            <Style TargetType="Button" x:Key="PinButton">
                <Setter Property="Width" Value="50"/>
                <Setter Property="Height" Value="50"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        CornerRadius="20">
                                <Image x:Name="imageControl" Width="21" RenderOptions.BitmapScalingMode="HighQuality" Source="/Resource/Pin_A.png"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="DarkGray"/>
                                </Trigger>
                                <DataTrigger Binding="{Binding InfoBarContent.IsPin}" Value="True">
                                    <Setter TargetName="imageControl" Property="Source" Value="/Resource/Pin_B.png"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Style for all TabControls -->
            <Style TargetType="TabControl">
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Background" Value="White"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabControl">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <TabPanel Grid.Row="0" Background="LightGray" IsItemsHost="True"/>
                                <Border Grid.Row="1" BorderBrush="Gray" BorderThickness="0,0.5,0,0" Background="{TemplateBinding Background}">
                                    <ContentPresenter ContentSource="SelectedContent"/>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="TabItem">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Foreground" Value="DarkGray"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="Padding" Value="10, 5"/>
                <Setter Property="Height" Value="45"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <Border Name="Border" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0,0,0,2">
                                <ContentPresenter x:Name="ContentSite"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Center"
                                              ContentSource="Header"
                                              Margin="12,2,12,2"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="DeepSkyBlue"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="LightGray"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- 实例被屏蔽时的RadioButton 带未读气泡-->
            <Style x:Key="DisabledNavigationButton" TargetType="RadioButton">
                <Setter Property="Opacity" Value="0.3"/>
                <Setter Property="Width" Value="65"/>
                <Setter Property="Height" Value="65"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">
                            <Grid>
                                <!-- 背景圆圈 -->
                                <Ellipse x:Name="BackgroundEllipse" Fill="Transparent" Stroke="LightGray" StrokeThickness="1"
         Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                                <!-- 选中状态的圆 -->
                                <Ellipse x:Name="SelectedEllipse" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
         HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
         Fill="Orange" Stroke="Transparent" StrokeThickness="0"/>
                                <!-- 内容 -->
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0"/>
                                <!-- 右上角的未读消息提示 -->
                                <Border x:Name="NotificationBadge" 
            Width="18" Height="18"
            Background="OrangeRed" 
            CornerRadius="9"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            Margin="0,0,-6,0"
            Visibility="{Binding HasUnreadMessages}">
                                    <!-- 默认为隐藏 -->
                                    <TextBlock Text="{Binding DisplayUnreadMessagesCount}" 
                   Foreground="White"
                   HorizontalAlignment="Center" 
                   VerticalAlignment="Center"
                   FontSize="10"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <!-- 选中状态 -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="BackgroundEllipse" Property="StrokeThickness" Value="0"/>
                                    <!-- 边框消失 -->
                                </Trigger>
                                <!-- 未选中状态 -->
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="BackgroundEllipse" Property="StrokeThickness" Value="2"/>
                                    <!-- 恢复默认边框 -->
                                </Trigger>
                                <!-- 鼠标悬停状态 -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="BackgroundEllipse" Property="Fill" Value="Orange"/>
                                </Trigger>
                                <!-- 鼠标移出状态 -->
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter TargetName="BackgroundEllipse" Property="Fill" Value="Transparent"/>
                                </Trigger>
                                <!-- 检查 Tag，如果设置为 "NoBadge" 则不显示气泡 -->
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="NoBadge">
                                    <Setter TargetName="NotificationBadge" Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- 实例被选中时的RadioButton 带未读气泡-->
            <Style x:Key="NavigationButton" TargetType="RadioButton">
                <Setter Property="Width" Value="65"/>
                <Setter Property="Height" Value="65"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">
                            <Grid>
                                <!-- 背景圆圈 -->
                                <Ellipse x:Name="BackgroundEllipse" Fill="Transparent" Stroke="LightGray" StrokeThickness="1"
                         Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                                <!-- 选中状态的圆 -->
                                <Ellipse x:Name="SelectedEllipse" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                         HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
                         Fill="Orange" Stroke="Transparent" StrokeThickness="0"/>
                                <!-- 内容 -->
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0"/>
                                <!-- 右上角的未读消息提示 -->
                                <Border x:Name="NotificationBadge" 
                            Width="18" Height="18"
                            Background="OrangeRed" 
                            CornerRadius="9"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Margin="0,0,-6,0"
                            Visibility="{Binding ButtonsModel.HasUnreadMessages}">
                                    <!-- 默认为隐藏 -->
                                    <TextBlock Text="{Binding ButtonsModel.DisplayUnreadMessagesCount}" 
                                   Foreground="White"
                                   HorizontalAlignment="Center" 
                                   VerticalAlignment="Center"
                                   FontSize="10"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <!-- 选中状态 -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="BackgroundEllipse" Property="StrokeThickness" Value="0"/>
                                    <!-- 边框消失 -->
                                </Trigger>
                                <!-- 未选中状态 -->
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="BackgroundEllipse" Property="StrokeThickness" Value="2"/>
                                    <!-- 恢复默认边框 -->
                                </Trigger>
                                <!-- 鼠标悬停状态 -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="BackgroundEllipse" Property="Fill" Value="Goldenrod"/>
                                </Trigger>
                                <!-- 鼠标移出状态 -->
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter TargetName="BackgroundEllipse" Property="Fill" Value="Transparent"/>
                                </Trigger>
                                <!-- 检查 IsNotify，如果设置为 "false" 则不显示气泡 -->
                                <DataTrigger Binding="{Binding BrowserModel.IsNotify}" Value="false">
                                    <Setter TargetName="NotificationBadge" Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                                <!-- 检查 IsEnabled 属性，当 IsEnabled 为 False 时，透明度为 50% -->
                                <DataTrigger Binding="{Binding IsEnable}" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                    <!-- 设置透明度 -->
                                </DataTrigger>
                                <!-- 检查 IsEnabled 属性，当 IsEnabled 为 False 时，透明度为 30% -->
                                <DataTrigger Binding="{Binding BrowserModel.IsLoaded}" Value="False">
                                    <Setter Property="Opacity" Value="0.3"/>
                                    <!-- 设置透明度 -->
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- 被选中时的RadioButton -->
            <Style x:Key="SelectedButton" TargetType="RadioButton">
                <Setter Property="Width" Value="65"/>
                <Setter Property="Height" Value="65"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">
                            <Grid>
                                <!-- 背景圆圈 -->
                                <Ellipse x:Name="BackgroundEllipse" Fill="Transparent" Stroke="LightGray" StrokeThickness="1"
             Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                                <!-- 选中状态的圆 -->
                                <Ellipse x:Name="SelectedEllipse" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
             HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
             Fill="Orange" Stroke="Transparent" StrokeThickness="0"/>
                                <!-- 内容 -->
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <!-- 选中状态 -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="BackgroundEllipse" Property="StrokeThickness" Value="0"/>
                                    <!-- 边框消失 -->
                                </Trigger>
                                <!-- 未选中状态 -->
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="BackgroundEllipse" Property="StrokeThickness" Value="2"/>
                                    <!-- 恢复默认边框 -->
                                </Trigger>
                                <!-- 鼠标悬停状态 -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="BackgroundEllipse" Property="Fill" Value="Goldenrod"/>
                                </Trigger>
                                <!-- 鼠标移出状态 -->
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter TargetName="BackgroundEllipse" Property="Fill" Value="Transparent"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--超出内容自动显示上下箭头的滚动条样式-->
            <Style  x:Key="AutomaticArrowScrollViewer" TargetType="ScrollViewer">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <!-- 内容区域 -->
                                <ScrollContentPresenter Grid.Row="1"/>

                                <!-- 上箭头按钮（简约样式） -->
                                <RepeatButton  Margin="3" Background="Transparent" BorderThickness="0" Width="50" Grid.Row="0" Command="{x:Static ScrollBar.LineUpCommand}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                    <!-- 上箭头按钮（空心箭头样式） -->
                                    <RepeatButton Background="Transparent" Foreground="LightGray" BorderThickness="0" Grid.Row="0" Command="{x:Static ScrollBar.LineUpCommand}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                        <Path Data="M0,8 L6,0 L12,8" Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type RepeatButton}}}" StrokeThickness="2"/>
                                    </RepeatButton>
                                </RepeatButton>

                                <!-- 下箭头按钮 -->
                                <RepeatButton Grid.Row="2" Margin="3" Background="Transparent" BorderThickness="0" Width="50" Command="{x:Static ScrollBar.LineDownCommand}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                    <RepeatButton Background="Transparent" Foreground="LightGray" BorderThickness="0" Grid.Row="0" Command="{x:Static ScrollBar.LineDownCommand}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                        <Path Data="M0,0 L6,8 L12,0" Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type RepeatButton}}}" StrokeThickness="2"/>
                                    </RepeatButton>
                                </RepeatButton>

                                <!-- 垂直滚动条 -->
                                <ScrollBar x:Name="PART_VerticalScrollBar"
                               Grid.Row="1"
                               Value="{TemplateBinding VerticalOffset}"
                               Maximum="{TemplateBinding ScrollableHeight}"
                               ViewportSize="{TemplateBinding ViewportHeight}"
                               Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                    <ScrollBar.Template>
                                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                                        </ControlTemplate>
                                    </ScrollBar.Template>
                                </ScrollBar>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <!-- Define a modern style for ToolTip -->
            <Style TargetType="ToolTip">
                <Setter Property="Background" Value="#FF2D2D30"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Padding" Value="5"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToolTip">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <!-- Left triangle -->
                                <Polygon Points="0,5 5,0 5,10" Fill="#FF2D2D30" Stroke="#FF2D2D30" Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                <!-- Rounded corner border -->
                                <Border Height="35" Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0"
                                    CornerRadius="8" Grid.Row="0" Grid.Column="1">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0,10,0"/>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="Grid" x:Key="FadeGridStyle">
                <Setter Property="Opacity" Value="0"/>
                <Style.Triggers>
                    <Trigger Property="Visibility" Value="Visible">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.4" To="1" Storyboard.TargetProperty="Opacity"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Opacity" FillBehavior="Stop"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>

    </Application.Resources>
</Application>
